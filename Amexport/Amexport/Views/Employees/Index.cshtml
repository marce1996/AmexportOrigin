
@model List<Amexport.Models.EmployeesModel>

@{
    ViewBag.Title = "Index";
}


<div class="bg-color-of-white">
    <div class="container pb-2">
        <div class="row">
            <div class="col-8">
                <h2>@ViewData["Titulo"]</h2>
            </div>
            <div class="col-4">
                <button class="btn btn-primary SiteDatatable" type="button" onclick="AddEdit(0)"><i class="fa fa-plus"></i>ADD</button>
            </div>
        </div>
    </div>

</div>

<div class="container">
    <br />
    <div style="margin:0 auto;">
        <table id="tblEntities" class="table table-hover table-sm nowrap SiteDatatable">
            <tr>
            </tr>
        </table>
    </div>
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalbody">

            </div>

        </div>
    </div>
</div>


@using (Html.BeginForm("Create", "Employees", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <input type="file" name="postedFile" />
    <input type="submit" value="Import" />
}

@if (Model.Count() > 0)
{
    <hr />
    <table cellpadding="0" cellspacing="0">
        <tr>
            <th>Employee ID</th>
            <th>Last Name</th>
            <th>FirstName</th>
            <th>Title</th>
            <th>TitleOfCourtesy</th>
            <th>BirthDate</th>
            <th>HireDate</th>
            <th>Address</th>
            <th>City</th>
            <th>Region</th>
            <th>PostalCode</th>
            <th>Country</th>
            <th>HomePhone</th>
            <th>Extension</th>
            <th>Photo</th>
            <th>Notes</th>
            <th>ReportsTo</th>
        </tr>

        @foreach (var employees in Model)
        {
            <tr>
                <td>@employees.EmployeeID</td>
                <td>@employees.LastName</td>
                <td>@employees.FirstName</td>
                <td>@employees.Title</td>
                <td>@employees.TitleOfCourtesy</td>
                <td>@employees.BirthDate</td>
                <td>@employees.HireDate</td>
                <td>@employees.Address</td>
                <td>@employees.City</td>
                <td>@employees.Region</td>
                <td>@employees.PostalCode</td>
                <td>@employees.Country</td>
                <td>@employees.HomePhone</td>
                <td>@employees.Extension</td>
                <td>@employees.Photo</td>
                <td>@employees.Notes</td>
                <td>@employees.ReportsTo</td>
            </tr>
        }
    </table>
}

@section Scripts{

    <script>
        //alert('wuuuola');

        const controller = '@ViewData["Controller"]'
            , entity = '@ViewData["Entity"]'
            , path = '@Url.Content("~")';
        const uriList = `${path}${controller}/ListAsync`,
            urlAddEdit = `${window.location.origin}/${controller}/AddEditAsync?itemId=`,
            urisave = `${window.location.origin}/${controller}/SaveAsync`
        $(document).ready(function () {



            //conlsole.log(uriList);


            $('#tblEntities').dataTable({

            processing: true, // for show progress bar
            serverSide: true, // for process server side
            filter: true, // this is for disable filter (search box)
            orderMulti: false, // for disable multiple column at once
            ajax:
            {
                url: uriList, type: 'POST', datatype: 'json',

            },
            columns: [
                {
                    name: 'EmployeeID', data: 'EmployeeID', title: 'EmployeeID',
                    searchable: false, visible: false
                },
                {
                    name: 'LastName', data: 'LastName', title: 'LastName',
                    sortable: true, searchable: true, "autoWidth": true
                },
                {
                    name: 'FirstName', data: 'FirstName', title: 'FirstName',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'Title', data: 'Title', title: 'Title',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'TitleOfCourtesy', data: 'TitleOfCourtesy', title: 'TitleOfCourtesy',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'BirthDate', data: 'BirthDate', title: 'BirthDate',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'HireDate', data: 'HireDate', title: 'HireDate',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'Address', data: 'Address', title: 'Address',
                    sortable: true, searchable: false, "autoWidth": true
                },
                {
                    name: 'City', data: 'City', title: 'City',
                    sortable: true, searchable: false, "autoWidth": true
                },

                {
                    title: '<div class="text-center">Acciones</div>',
                    sortable: false,
                    render: function (data, type, row) {
                        var edit = `<div class="text-center"><i class="fas fa-pen btn btn-info" onclick="AddEdit(${row.EmployeeID});"></i>`;
                        var del = `<i class='fas fa-trash btn btn-info' onclick='DeleteAsync(event);' data-id='${row.EmployeeID}' data-element='${row.LastName}'></i></div >`;
                        return `${edit}&nbsp;&nbsp;${del}`;
                    }
                }
            ]

        });




        });

        var AddEdit = function (Id) {
            document.querySelector("#exampleModalLabel").innerHTML = Id === 0 ? `Agregar ${entity}` : `Actualizar ${entity}`;
            var url = `${urlAddEdit}${Id}`;

            // Hace una petición get y carga el formulario en la ventana modal
            $('#modalbody').load(url, function () {
                $.validator.unobtrusive.parse("#form");
                $('#exampleModal').modal("show");
                console.log(url);
            });
        }
        $('body').on('click', '#submit', (e) => {
            e.preventDefault();
            $('form').validate();
            if (!$('form').valid()) {
                return;
            }

            var form = new FormData(document.getElementById('form'));
            SaveAsync(urisave, form, reloadTable);

        });
    </script>
}